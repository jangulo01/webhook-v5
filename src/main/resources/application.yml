# Main application configuration file
# Contains common settings for all environments

# Server configuration
server:
  port: 5000
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never

# Spring configuration
spring:
  application:
    name: webhook-service
    
  # Database configuration
  datasource:
    url: jdbc:postgresql://localhost:5432/webhook_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      pool-name: WebhookHikariCP
    
  # JPA/Hibernate configuration  
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate # Use Flyway for schema management, not Hibernate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        default_schema: webhook_db
        jdbc:
          time_zone: UTC
    show-sql: false
    
  # Kafka configuration  
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: webhook-processor-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.yourcompany.webhookservice
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    
  # Flyway database migration configuration  
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    schemas: webhook_db
    
  # Jackson JSON configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: non_null
    
  # Task execution configuration
  task:
    execution:
      pool:
        core-size: 5
        max-size: 10
        queue-capacity: 25
      thread-name-prefix: webhook-task-
    scheduling:
      pool:
        size: 3
      thread-name-prefix: webhook-scheduled-
      
# Management endpoints configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
  health:
    db:
      enabled: true
    kafka:
      enabled: true

# Logging configuration
logging:
  level:
    root: INFO
    com.yourcompany.webhookservice: INFO
    org.hibernate.SQL: INFO
    org.springframework.web: INFO
    org.springframework.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/webhook-service.log
    max-size: 10MB
    max-history: 10

# Custom webhook service configuration
webhook:
  # Basic configuration
  directMode: false  # When true, bypasses Kafka and processes directly
  defaultSecret: test-secret  # Default secret used when not defined in config
  
  # HMAC signature configuration
  hmac:
    header-name: X-Webhook-Signature  # Default header for signatures
    use-module: true  # Use HmacService implementation
    log-details: false  # Enable detailed logging of HMAC signing (disable in production)
  
  # Retry configuration
  retry:
    scheduler:
      enabled: true
      interval: 30000  # Check interval in ms
    kafka:
      topic: webhook-retries
      consumer-group: webhook-retry-consumer-group
  
  # Main processing configuration
  processing:
    kafka:
      topic: webhook-events
      consumer-group: webhook-processor-group
    threads: 5  # Number of processing threads
  
  # Monitoring and metrics
  monitoring:
    health-check-interval: 60000  # ms
    metrics-enabled: true
  
  # Security configuration
  security:
    enabled: true
    api-key-header: X-API-Key
    allowed-origins: "*"
    admin-endpoints-require-auth: true
    
  # Cleanup configuration
  cleanup:
    enabled: true
    run-interval: 3600000  # 1 hour in ms
    retention-days: 30  # Retention period for delivery attempts

# Profiles
# This file contains common settings, use application-{profile}.yml for environment-specific settings
---
spring:
  config:
    activate:
      on-profile: dev
      
  # Development-specific settings
  datasource:
    url: jdbc:postgresql://localhost:5432/webhook_db
  
  jpa:
    show-sql: true
    
logging:
  level:
    com.yourcompany.webhookservice: DEBUG
    org.hibernate.SQL: DEBUG
    
webhook:
  hmac:
    log-details: true

---
spring:
  config:
    activate:
      on-profile: prod
      
  # Production-specific settings
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:webhook_db}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:localhost:9092}
    
server:
  port: ${PORT:5000}
    
logging:
  level:
    root: WARN
    com.yourcompany.webhookservice: INFO
    
webhook:
  directMode: ${WEBHOOK_DIRECT_MODE:false}
  defaultSecret: ${WEBHOOK_DEFAULT_SECRET:change-me-in-production}
  hmac:
    log-details: false
  security:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:*}

---
spring:
  config:
    activate:
      on-profile: test
      
  # Test-specific settings
  datasource:
    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;DB_CLOSE_DELAY=-1
    username: sa
    password: sa
    driver-class-name: org.h2.Driver
    
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        
  kafka:
    bootstrap-servers: localhost:9092
    
  flyway:
    enabled: false

webhook:
  directMode: true
  security:
    enabled: false